#include "H/Function_Init.H"

 uint  CLTIME;	      //闭合时间
 uint  OPTIME;		  // 断开时间
 uint  CPN;			  // 次数
 uchar ScreenCount;		  //第几幅面
 uchar NumberBit;		//第几位	
 uchar change;		//有按键按下的标志位
 uchar MODLongKey; //按键被长时间按下
 uchar NumberN;     //用来区分是动作次数是否为无限循环的标志
 uchar KEYNOW;    //按键此时是设置和轮询的标志    1位设置，0位轮询；
 uint  NumberVal1[4];  // 用于存放闭合界面的数据
 uint  NumberVal2[4];  // 用于存放断开界面的数据
 uint  NumberVal3[4];  // 用于存放动作次数的界面数据
 uchar star=0; //开始运行标记
 extern jb;
 extern jk;
 uchar close;//闭合开始计时
 uchar open;// 打开断开开始计时



unsigned char xdata LCDRAM[30]  _at_  0x700;
typedef enum{LEDCOM0=0,LEDCOM1,LEDCOM2,LEDCOM3,LEDCOM4,LEDCOM5,LEDCOM6,LEDCOM7} LedSelCOM;
u16 code LedCodeTab[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x40,0x80}; //0-9,	 --,.
void LED_Init(void);
void LED_Init_Cl(void);
void PxVO_Init(void);
void KeyInit(void);
void KeyGet(void);
extern void LedSegData(u16 LedData,LedSelCOM COMx);
/*****************************************************
*函数名称：void LCD_Test(void)
*函数功能：某段数值显示
*入口参数：LedData	COMx
*出口参数：void
*****************************************************/
void LedSegData(u16 LedData,LedSelCOM COMx)
{
	LCDRAM[12]  |=  ((LedCodeTab[LedData]>>0)&0x01)<<COMx;
	LCDRAM[13]  |=  ((LedCodeTab[LedData]>>1)&0x01)<<COMx;
 	LCDRAM[14]  |=  ((LedCodeTab[LedData]>>2)&0x01)<<COMx;
 	LCDRAM[15]  |=  ((LedCodeTab[LedData]>>3)&0x01)<<COMx;
	LCDRAM[16]  |=  ((LedCodeTab[LedData]>>4)&0x01)<<COMx;
 	LCDRAM[17]  |=  ((LedCodeTab[LedData]>>5)&0x01)<<COMx;
 	LCDRAM[18]  |=  ((LedCodeTab[LedData]>>6)&0x01)<<COMx;
    LCDRAM[19]  |=  ((LedCodeTab[LedData]>>7)&0x01)<<COMx; 
}
	
/*****************************************************
*函数名称：void LCD_Test(void)
*函数功能：LCD/LED测试
*入口参数：void
*出口参数：void
*****************************************************/
void LCD_LED_Test(void)		//清屏
{
   uchar  i;
   for( i=11;i++;i<20)
   {
   	   LCDRAM[i]=0;
   
   }
		
}

/*****************************************************
*函数名称：void LED_Init(void)
*函数功能：LED初始化
*入口参数：void
*出口参数：void
*****************************************************/
void LED_Init(void)
{
	PxVO_Init();
	DDRCON = 0xC0;//DDRCON = 0xF0;    //-xyy zzzz  x:LCD/LED模式 y:占空比1/8:00 1/6:01 1/5:10 1/4:11  z:LCD电压调节
    OTCON |= 0x06; //	OTCON |= 0x00;    //---- xxyz  x:LCD分压电阻 y:复位管脚选择 z:LCD偏置电压		
}


/*****************************************************
*函数名称：void PxVO_Init(void)
*函数功能：显示驱动输出口初始化
*入口参数：void
*出口参数：void
*****************************************************/
void PxVO_Init(void)
{
	#if (IC_MODEL == SC92F7447 || IC_MODEL == SC92F7446)
	P0VO = 0x00;    
	P2VO = 0xFF;
	P3VO = 0xFF;
	#endif
}

void IAP_xr(void)	  //写数据
{
IAPWrite(0xf0,NumberVal1[0],IapEPPROM);
IAPWrite(0xf1,NumberVal1[1],IapEPPROM);
IAPWrite(0xf2,NumberVal1[2],IapEPPROM);
IAPWrite(0xf3,NumberVal1[3],IapEPPROM);
IAPWrite(0xf4,NumberVal2[0],IapEPPROM);
IAPWrite(0xf5,NumberVal2[1],IapEPPROM);
IAPWrite(0xf6,NumberVal2[2],IapEPPROM);
IAPWrite(0xf7,NumberVal2[3],IapEPPROM);
IAPWrite(0xf8,NumberVal3[0],IapEPPROM);
IAPWrite(0xf9,NumberVal3[1],IapEPPROM);
IAPWrite(0xfa,NumberVal3[2],IapEPPROM);
IAPWrite(0xfb,NumberVal3[3],IapEPPROM);
IAPWrite(0xfc,NumberN,IapEPPROM);
}




void KeyInit(void)
{
    /*IO初始化,默认输入*/		
	ScreenCount=0;
	NumberBit=3;
	change=1;
	MODLongKey=0;
	KEYNOW=0;
}
void KeyGet(void)
{	
	if(MOD == 0)  //功能键按下
	{
	    change=1;
		KEYNOW=0;
	    ScreenCount++;
        if(ScreenCount>2)
		    {
		      ScreenCount=0;
		    }  
	}

	if(ZY==0&&YY==0)   //左移右移同时按下进行参数修改
	{
	    change=1;
	    KEYNOW=1;
	    star=0;
	    L4=1;
		jb=jk=0;
	    					  	
	}

	if(ZY == 0)	  //左移按键按下
	 {
	   if(KEYNOW==1){
	   	 	         change=1;
	                 NumberBit++;
	                 if(NumberBit>3)
	                  {
		               NumberBit=0;
		              }
	                }
	 }

	if(YY == 0)	 //右移
	 {
	   if(KEYNOW==1){
	     	         change=1;
	                 if(NumberBit!=0)
	                  {
	                   NumberBit--;
		              }
		             else
		                {
			              NumberBit=3;
			            }
		            }
	 }  


	if(UP == 0)	 //上、+
	 {  
	   if(KEYNOW==1){
	                  change=1;
	  				  if(ScreenCount==0)
	                   {
			             NumberVal1[NumberBit]++;
			             if(NumberVal1[NumberBit]>9)
			              {
				            NumberVal1[NumberBit]=0;
				          }
		               } 
	                   if(ScreenCount==1)
	                    {
			               NumberVal2[NumberBit]++;
			               if(NumberVal2[NumberBit]>9)
			                {
				              NumberVal2[NumberBit]=0;
				            }
		                }
	                   if(ScreenCount==2)
	                    {
			               NumberVal3[NumberBit]++;
			               if(NumberVal3[NumberBit]>9&&(NumberBit!=3))
			                {
			                  NumberVal3[NumberBit]=0;
				              NumberN=0;
			                }
			               if(NumberVal3[3]==10)
			                {
							  NumberVal3[3]=0;
						      NumberVal3[2]=0;
							  NumberVal3[1]=0;
						      NumberVal3[0]=0;
							  NumberN=1;
			 			    } //else{NumberN=0;}
		                }
			          } 
	    }  

	if(DOWN == 0)  //下、-
	{
	 if(KEYNOW==1){
    	           change=1;
	               if(ScreenCount==0&&NumberVal1[NumberBit]!=0)
	                {
			          NumberVal1[NumberBit]--;
			          if(NumberVal1[NumberBit]<0)
			           {
				        NumberVal1[NumberBit]=9;
				       }
			        } 
	              if(ScreenCount==1&&NumberVal2[NumberBit]!=0)
	                {
		              NumberVal2[NumberBit]--;
			          if(NumberVal2[NumberBit]<0)
			           {
				        NumberVal2[NumberBit]=9;
				       }
		            }
	              if(ScreenCount==2&&NumberVal3[NumberBit]!=0)
	                {
			         NumberVal3[NumberBit]--;
			         if(NumberVal3[NumberBit]<0)
				      {
				  		NumberVal3[NumberBit]=9;
					  }
			        }
	              }
	 }

	 if(ENTER == 0)
	  {
	      star=1;	    
		  if(CLTIME!=0&&CPN!=0)
		   {
		    close=1; 
		   }
		  L4=0;
		  IAP_xr();
		  
	  }
		if(KEYNOW==1) {
		CLTIME=	NumberVal1[0]+NumberVal1[1]*10+NumberVal1[2]*100+NumberVal1[3]*1000;
		OPTIME=	NumberVal2[0]+NumberVal2[1]*10+NumberVal2[2]*100+NumberVal2[3]*1000;
		if(NumberN==0)
		{
		CPN=NumberVal3[0]+NumberVal3[1]*10+NumberVal3[2]*100+NumberVal3[3]*1000;
		}
	               	  }	
}

void KeyProcess(void)
{	
   if(change==1)
   {
      change=0;
    switch(ScreenCount)
	{
	   case 0:  
	           LCD_LED_Test();
			   if(KEYNOW==1){
			   				 LedSegData(11,3-NumberBit);
							}			   
	           LedSegData(NumberVal1[0],3 );
			   LedSegData(NumberVal1[1],2 );
			   LedSegData(NumberVal1[2],1 );
			   LedSegData(NumberVal1[3],0 ); 
			   L1=0;L2=L3=1;
			   break;
	   case 1: 
	       
	           LCD_LED_Test();
			   if(KEYNOW==1){
			   				 LedSegData(11,3-NumberBit);
							}
	           LedSegData(NumberVal2[0],3 );
			   LedSegData(NumberVal2[1],2 );
			   LedSegData(NumberVal2[2],1 );
			   LedSegData(NumberVal2[3],0 ); 
			   L2=0;L1=L3=1;
			   break;
	   case 2: 
			   LCD_LED_Test();
			   if(KEYNOW==1){
			                 LedSegData(11,3-NumberBit);
							}
			   if(NumberN==0){
			   LedSegData(NumberVal3[0],3 );
			   LedSegData(NumberVal3[1],2 );
			   LedSegData(NumberVal3[2],1 );
			   LedSegData(NumberVal3[3],0 ); 
			                 }
			   if(NumberN==1)							
			   {
			     LCD_LED_Test();
				 if(KEYNOW==1)
				 {
				 LedSegData(11,3-NumberBit);
				 }
			   	 LedSegData(10,3);
				 LedSegData(10,2);
				 LedSegData(10,1);
				 LedSegData(10,0);            
			   }
			   L3=0;L2=L1=1;
			   break;
	
	}  			   
   }	               
}



void IAP_ds(void)    //读数据
{
NumberVal1[0]=IAPRead(0xf0,IapEPPROM);
NumberVal1[1]=IAPRead(0xf1,IapEPPROM);
NumberVal1[2]=IAPRead(0xf2,IapEPPROM);
NumberVal1[3]=IAPRead(0xf3,IapEPPROM);
NumberVal2[0]=IAPRead(0xf4,IapEPPROM);
NumberVal2[1]=IAPRead(0xf5,IapEPPROM);
NumberVal2[2]=IAPRead(0xf6,IapEPPROM);
NumberVal2[3]=IAPRead(0xf7,IapEPPROM);
NumberVal3[0]=IAPRead(0xf8,IapEPPROM);
NumberVal3[1]=IAPRead(0xf9,IapEPPROM);
NumberVal3[2]=IAPRead(0xfa,IapEPPROM);
NumberVal3[3]=IAPRead(0xfb,IapEPPROM);
NumberN= IAPRead(0xfc,IapEPPROM);
CLTIME=	NumberVal1[0]+NumberVal1[1]*10+NumberVal1[2]*100+NumberVal1[3]*1000;
OPTIME=	NumberVal2[0]+NumberVal2[1]*10+NumberVal2[2]*100+NumberVal2[3]*1000;
if(NumberN!=1)
		{
		CPN=NumberVal3[0]+NumberVal3[1]*10+NumberVal3[2]*100+NumberVal3[3]*1000;
		}
}
